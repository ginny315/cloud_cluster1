首先，这个命令是可以不报错运行的，可以跑出feature的，是在database_test里面测试的
/opt/spark-2.2.1-bin-hadoop2.7/bin/spark-submit --master=yarn ~/Stocks/python/xieyun.py
*******************************************************************************************
之前的几个错误：
1.spark broadcast的问题，我把main去掉之后就好了，不知道是不是真的是这个原因
2.之前发在群里的错误的截图的最后一张，是因为我把这个
   data1 = data.map(lambda x:[x[0],getdiff(x[1])]).collect()写成了这个：
   data1 = data.map(lambda x:(x[0],getdiff(x[1])).collect() 
3.之前报的这个错： No module named hbase.ttypes，是因为分布式在salve上面跑，
   所以每个slave上都要要pip install这个东西，每个slave都pip install hbase-thrift就不报这个错了
4.现在的报错是数据库的错误，可以运行这个命令看一下：
/opt/spark-2.2.1-bin-hadoop2.7/bin/spark-submit --master=yarn ~/Stocks/python/duyongzhi.py
也可以直接看图片“报错4.png”
5.我感觉现在是只有write_feature方法出问题，就是4里面的报错，应该是因为我不会用那个write_feature的方法，你们来在这个里面添加数据。

说明：
1.先在student62下面的/home/hduser/Stocks/python/short_database.py试一下跑纯是存feature到database_test的代码，
  里面我写的feature数据和database_test的图片名已经是对应的了
  如果在这个里面insert成功了就进行“2”，没成功就“3”
2.在我发的这个xieyun2.py文件中改def getdiff(img):这个方法下面92,93行的WHB.write_feature(str(avglist), name)这个部分。
3.(1没成功试这个)在我发的xieyun3.py文件中改最下面105-107行，注释里for i in range(len(data1)): 下面的WHB.write_feature(str(data1[i][1]), data1[i][0])
   下面有对data1这个二维数组的说明
4.最后，如果是做的“2”成功了，如果勇敢的话，就把在“2”改的部分在insert_allfeature1.py里面同样的位置改一下，然后把数据库名字改成真的猫的那个，或者还有什么数据库的东西要改的改一下，运行的就是在猫的数据库里面插入特征值数据
    如果是做的“3”成功了，就把在“3”改的部分在insert_allfeature2.py里面同样的位置改一下，然后把数据库名字改成真的猫的那个，运行的就是在猫的数据库里面插入特征值数据

...................................................................................................................................
//这个下面是说如果不能在分布式算每个图片feature的同时存入数据库的情况下，可以用这个跑
在文件xieyun3.py里面最下面找一下：
这个下面是循环写进数据库，在这个点之前的代码是没有问题的：
data1是一个二维数组，打印出来是这样的：
[['test11.jpg', [78, 110, 177, 181, 156, 115, 89, 122, 146, 147, 146, 140, 141, 139, 135, 90, 63, 55, 68, 151, 111, 124, 99, 97, 136, 128, 116, 125, 117, 17]], 
['ggg.jpg', [185, 205, 204, 201, 177, 164, 145, 138, 137, 139, 143, 137, 132, 139, 142, 134, 147, 143, 147, 144, 153, 174, 151, 124, 102, 87, 36, 31, 47, 28]], 
['lala.jpg', [155, 148, 142, 145, 139, 139, 149, 153, 163, 159, 153, 141, 133, 126, 139, 151, 168, 172, 170, 177, 182, 189, 193, 195, 199, 203, 204, 204, 203, 203]]] 
下面的循环其中data1[i][1]就是每个图片的feature数组，data1[i][0]是picture的名字。我已经print过了，是这样的（群里的第一张截图）：
data1[i][0]：test11.jpg
data1[i][1]：[78, 110, 177, 181, 156, 115, 89, 122, 146, 147, 146, 140, 141, 139, 135, 90, 63, 55, 68, 151, 111, 124, 99, 97, 136, 128, 116, 125, 117, 17]
如果说没有什么别的地方不对的话，感觉应该是根据下面的写进数据库的，但是我可能不会写那个写feature的方法，就是根据上面说的data1这个二维数组应该是可以写进数据库的.
...................................................................................................................................

*******************************************************************************************